# lextab.py. This file automatically created by PLY (version 3.8). Don't edit!
_tabversion   = '3.8'
_lextokens    = {'DEDENT', 'RSHIFT', 'not', 'prefix', 'None', 'STRING', 'MODULOEQUAL', 'XOREQUAL', 'RSHIFTEQUAL', 'GREATEREQUAL', 'break', 'or', 'DIVIDEQUAL', 'else', 'EQEQUAL', 'in', 'and', 'NEWLINE', 'is', 'NOTEQUAL', 'INDENT', 'base', 'if', 'False', 'IRI', 'pass', 'for', 'print', 'FLOORDIVIDE', 'PLUSEQUAL', 'LESSEQUAL', 'TIMESEQUAL', 'continue', 'while', 'LANDEQUAL', 'FLOORDIVIDEQUAL', 'return', 'True', 'LSHIFTEQUAL', 'NUMBER', 'LOREQUAL', 'def', 'elif', 'POWER', 'NAME', 'LSHIFT', 'MINUSEQUAL', 'POWEREQUAL'}
_lexreflags   = 40
_lexliterals  = ':.,;()[]{}+-*/%&|~^<>=@'
_lexstateinfo = {'inbraces': 'exclusive', 'INITIAL': 'inclusive'}
_lexstatere   = {'inbraces': [('(?P<t_ANY_COMMENT>^\\#[^\\r\\n]*)|(?P<t_ANY_BRACES_OPEN>[\\(\\[{])|(?P<t_ANY_BRACES_CLOSE>[\\)\\]}])|(?P<t_ANY_STRING>(\\\'\\\'\\\'([^\\\'\\\\]*((\\\\.|\\\'(?!\\\'\\\'))[^\\\'\\\\]*)*)\\\'\\\'\\\'|"""([^"\\\\]*((\\\\.|"(?!""))[^"\\\\]*)*)"""|\\\'([^\\\'\\\\]*(\\\\.[^\\\'\\\\]*)*)\\\'|"([^"\\\\]*(\\\\.[^"\\\\]*)*)"))|(?P<t_ANY_IRI>(([^\\W\\d_<>\\s]([^\\W\\s<>]|[+.-])*)://)?([^\\W\\d_<>\\s](([^\\W<>\\s])*[^\\W<>\\s])?)(\\.([^\\W\\d_<>\\s](([^\\W<>\\s])*[^\\W<>\\s])?))*((:[\\d]{1,5}))?(((/([^?;\\W\\#<>\\s]|[+.-])*)*))?((\\?([^\\W\\#;<>\\s]|[+.-])*))?((\\#([^\\W<>\\s]|[+.-])*))?)|(?P<t_ANY_NUMBER>(0[bB][01]*|0[xX][\\da-fA-F]*[lL]?|0[oO]?[0-7]*[lL]?|[1-9]\\d*[lL]?))|(?P<t_ANY_POWEREQUAL>\\*\\*=)|(?P<t_ANY_POWER>\\*\\*)|(?P<t_ANY_LSHIFTEQUAL><<=)|(?P<t_ANY_XOREQUAL>\\^=)|(?P<t_ANY_LOREQUAL>\\|=)|(?P<t_ANY_TIMESEQUAL>\\*=)|(?P<t_ANY_FLOORDIVIDEQUAL>//=)|(?P<t_ANY_PLUSEQUAL>\\+=)|(?P<t_ANY_RSHIFTEQUAL>>>=)|(?P<t_ANY_RSHIFT>>>)|(?P<t_ANY_ATEQUAL>@=)|(?P<t_ANY_FLOORDIVIDE>//)|(?P<t_ANY_LSHIFT><<)|(?P<t_ANY_MINUSEQUAL>-=)|(?P<t_ANY_LANDEQUAL>&=)|(?P<t_ANY_EQEQUAL>==)|(?P<t_ANY_DIVIDEQUAL>/=)|(?P<t_ANY_GREATEREQUAL>>=)|(?P<t_ANY_MODULOEQUAL>%=)|(?P<t_ANY_LESSEQUAL><=)|(?P<t_ANY_NOTEQUAL>!=)', [None, ('t_ANY_COMMENT', 'COMMENT'), ('t_ANY_BRACES_OPEN', 'BRACES_OPEN'), ('t_ANY_BRACES_CLOSE', 'BRACES_CLOSE'), ('t_ANY_STRING', 'STRING'), None, None, None, None, None, None, None, None, None, None, None, ('t_ANY_IRI', 'IRI'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ANY_NUMBER', 'NUMBER'), None, (None, 'POWEREQUAL'), (None, 'POWER'), (None, 'LSHIFTEQUAL'), (None, 'XOREQUAL'), (None, 'LOREQUAL'), (None, 'TIMESEQUAL'), (None, 'FLOORDIVIDEQUAL'), (None, 'PLUSEQUAL'), (None, 'RSHIFTEQUAL'), (None, 'RSHIFT'), (None, 'ATEQUAL'), (None, 'FLOORDIVIDE'), (None, 'LSHIFT'), (None, 'MINUSEQUAL'), (None, 'LANDEQUAL'), (None, 'EQEQUAL'), (None, 'DIVIDEQUAL'), (None, 'GREATEREQUAL'), (None, 'MODULOEQUAL'), (None, 'LESSEQUAL'), (None, 'NOTEQUAL')])], 'INITIAL': [('(?P<t_ANY_COMMENT>^\\#[^\\r\\n]*)|(?P<t_ANY_BRACES_OPEN>[\\(\\[{])|(?P<t_ANY_BRACES_CLOSE>[\\)\\]}])|(?P<t_ANY_STRING>(\\\'\\\'\\\'([^\\\'\\\\]*((\\\\.|\\\'(?!\\\'\\\'))[^\\\'\\\\]*)*)\\\'\\\'\\\'|"""([^"\\\\]*((\\\\.|"(?!""))[^"\\\\]*)*)"""|\\\'([^\\\'\\\\]*(\\\\.[^\\\'\\\\]*)*)\\\'|"([^"\\\\]*(\\\\.[^"\\\\]*)*)"))|(?P<t_ANY_IRI>(([^\\W\\d_<>\\s]([^\\W\\s<>]|[+.-])*)://)?([^\\W\\d_<>\\s](([^\\W<>\\s])*[^\\W<>\\s])?)(\\.([^\\W\\d_<>\\s](([^\\W<>\\s])*[^\\W<>\\s])?))*((:[\\d]{1,5}))?(((/([^?;\\W\\#<>\\s]|[+.-])*)*))?((\\?([^\\W\\#;<>\\s]|[+.-])*))?((\\#([^\\W<>\\s]|[+.-])*))?)|(?P<t_ANY_NUMBER>(0[bB][01]*|0[xX][\\da-fA-F]*[lL]?|0[oO]?[0-7]*[lL]?|[1-9]\\d*[lL]?))|(?P<t_NEWLINE>\\n+)|(?P<t_INBRACES_NEWLINE>\\n+)|(?P<t_ANY_POWEREQUAL>\\*\\*=)|(?P<t_ANY_POWER>\\*\\*)|(?P<t_ANY_LSHIFTEQUAL><<=)|(?P<t_ANY_XOREQUAL>\\^=)|(?P<t_ANY_LOREQUAL>\\|=)|(?P<t_ANY_TIMESEQUAL>\\*=)|(?P<t_ANY_FLOORDIVIDEQUAL>//=)|(?P<t_ANY_PLUSEQUAL>\\+=)|(?P<t_ANY_RSHIFTEQUAL>>>=)|(?P<t_ANY_RSHIFT>>>)|(?P<t_ANY_ATEQUAL>@=)|(?P<t_ANY_FLOORDIVIDE>//)|(?P<t_ANY_LSHIFT><<)|(?P<t_ANY_MINUSEQUAL>-=)|(?P<t_ANY_LANDEQUAL>&=)|(?P<t_ANY_EQEQUAL>==)|(?P<t_ANY_DIVIDEQUAL>/=)|(?P<t_ANY_GREATEREQUAL>>=)|(?P<t_ANY_MODULOEQUAL>%=)|(?P<t_ANY_LESSEQUAL><=)|(?P<t_ANY_NOTEQUAL>!=)', [None, ('t_ANY_COMMENT', 'COMMENT'), ('t_ANY_BRACES_OPEN', 'BRACES_OPEN'), ('t_ANY_BRACES_CLOSE', 'BRACES_CLOSE'), ('t_ANY_STRING', 'STRING'), None, None, None, None, None, None, None, None, None, None, None, ('t_ANY_IRI', 'IRI'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ANY_NUMBER', 'NUMBER'), None, ('t_NEWLINE', 'NEWLINE'), ('t_INBRACES_NEWLINE', 'INBRACES_NEWLINE'), (None, 'POWEREQUAL'), (None, 'POWER'), (None, 'LSHIFTEQUAL'), (None, 'XOREQUAL'), (None, 'LOREQUAL'), (None, 'TIMESEQUAL'), (None, 'FLOORDIVIDEQUAL'), (None, 'PLUSEQUAL'), (None, 'RSHIFTEQUAL'), (None, 'RSHIFT'), (None, 'ATEQUAL'), (None, 'FLOORDIVIDE'), (None, 'LSHIFT'), (None, 'MINUSEQUAL'), (None, 'LANDEQUAL'), (None, 'EQEQUAL'), (None, 'DIVIDEQUAL'), (None, 'GREATEREQUAL'), (None, 'MODULOEQUAL'), (None, 'LESSEQUAL'), (None, 'NOTEQUAL')])]}
_lexstateignore = {'inbraces': ' \t\n', 'INITIAL': ' \t'}
_lexstateerrorf = {'inbraces': 't_ANY_error', 'INITIAL': 't_ANY_error'}
_lexstateeoff = {}
